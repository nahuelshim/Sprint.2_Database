1. Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
db.Restaurante.find()

2.Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine per tots els documents en la col·lecció Restaurants.
db.Restaurante.find({},{restaurant_id:1, name:1, borough:1, cuisine:1})

3.Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.Restaurante.find({},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

4.Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però exclou el camp _id per tots els documents en la col·lecció Restaurants.
db.Restaurante.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1 })

5.Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
db.Restaurante.find({borough: "Bronx"}) 

6.Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
db.Restaurante.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: "Bronx"}).limit(5)

7.Escriu una consulta per mostrar el pròxim 5 restaurants després de saltar els primers 5 del Bronx.
db.Restaurante.find({}, { _id: 0, restaurant_id: 1, name: 1, borough: "Bronx"}).skip(5).limit(5)

8.Escriu una consulta per trobar els restaurants que tenen un score de més de 90.
db.Restaurante.find({ 'grades.score': {$gt: 90}})

9.Escriu una consulta per trobar els restaurants que tenen un score de més de 80 però menys que 100.
db.Restaurante.find({"grades.score": { $gt: 80, $lt: 100 }})

10.Escriu una consulta per trobar els restaurants que es localitzen en valor de latitud menys de -95.754168.
db.Restaurante.find({'address.coord': {$lt: -95.754168}})

11.Escriu una consulta de MongoDB per a trobar els restaurants que no preparen cap cuisine de 'American' i la seva qualificació és superior a 70 i longitud inferior a -65.754168.
db.Restaurante.find({$and:[{'cuisine' :{ $ne:'American'}, 'grades.score' : {$gt : 70}, 'address.coord': {$lt: -65.754168}}]})

12.Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American' i van aconseguir un marcador més de 70 i localitzat en la longitud menys que -65.754168. Nota: Fes aquesta consulta sense utilitzar $and operador.
db.Restaurante.find({'cuisine' :{ $ne:'American'}, 'grades.score' : {$gt : 70}, 'address.coord': {$lt: -65.754168}})

13. Escriu una consulta per trobar els restaurants que no preparen cap cuisine de 'American' i van obtenir un punt de grau 'A' no pertany a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent.
db.Restaurante.find({cuisine: {$ne:"American"}, "grades.grade": "A", borough: {$ne: "Brookyln"}}).sort({cuisine:-1})

14.Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Wil' com les tres primeres lletres en el seu nom.
db.Restaurante.find({name:/^Wil/},{restaurante_id:1, name: 1, borough:1, cuisine:1})

15.Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'ces' com les últimes tres lletres en el seu nom.
db.Restaurante.find({name:/ces$/},{restaurante_id : 1, name : 1, borough : 1, cuisine : 1})

16. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Reg' com tres lletres en algun lloc en el seu nom.
db.Restaurante.find({name:/Reg/},{restaurante_id : 1, name : 1, borough : 1, cuisine : 1})

17. Escriu una consulta per trobar els restaurants que pertanyen al Bronx i van preparar qualsevol plat americà o xinès.
db.Restaurante.find({borough: "Bronx",$or:[{cuisine: "American"}, {cuisine:"Chinese"}]}) 

18. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que pertanyen a Staten Island o Queens o Bronx o Brooklyn.
db.Restaurante.find({$or:[{borough:'Staten Island'}, {borough:'Queens'}, {borough:'Bronx'}, {borough:'Brooklyn'}]}, {restaurant_id:1, name:1, borough:1, cuisine:1})

19. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que no pertanyen a Staten Island o Queens o Bronx o Brooklyn.
db.Restaurante.find({borough : {$nin :['Staten Island', 'Queeens', 'Bronx','Brooklyn']}}, {_id:0, restaurant_id: 1, name:1, borough:1, cuisine:1 })

20. Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin un marcador que no és més de 10.
db.Restaurante.find({"grades.score": {$lt:10}}, {restaurante_id:1, name:1, borough:1, cuisine:1})

21.Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen peix excepte 'American' i 'Chinees' o el name del restaurant comença amb lletres 'Wil'.
db.Restaurante.find({$or: [{cuisine: {$nin: ['American ', 'Chinese']}}, {name: /^Wil/}]}, {restaurant_id:1, name:1, borough:1, cuisine:1})

22.Escriu una consulta per trobar el restaurant_id, name, i grades per a aquells restaurants que aconsegueixin un grau "A" i un score 11 en dades d'estudi ISODate "2014-08-11T00:00:00Z".
db.Restaurante.find({"grades.grade" : "A", "grades.score" : 11, "grades.date" : ISODate("2014-08-11T00:00:00Z")}, {_id:0, restaurant_id : 1, name : 1, grades : 1})

23.Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de varietat de graus conté un grau de "A" i marcador 9 sobre un ISODate "2014-08-11T00:00:00Z".
db.Restaurante.find({"grades.1.grade" : "A", "grades.1.score" : 9, "grades.1.date" : ISODate("2014-08-11T00:00:00Z")}, {_id:0, restaurant_id : 1, name : 1, grades : 1})

24.Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element del array coord conté un valor que és més de 42 i fins a 52.
db.Restaurante.find({"address.coord.1" : {$gt : 42, $lt : 52}}, {_id:0, restaurant_id : 1, name : 1, address : 1})

25.Escriu una consulta per organitzar el nom dels restaurants en ordre ascendent juntament amb totes les columnes.
db.Restaurante.find().sort({name : 1})

26.Escriu una consulta per organitzar el nom dels restaurants en ordre descendent juntament amb totes les columnes.
db.Restaurante.find().sort({name : -1})






